/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode*root,std::vector<int> v,std::vector<std::vector<int>> &ans,int tar){
        if(root==NULL) return;
        v.push_back(root->val);
        if(root->left==NULL && root->right==NULL){
            if(root->val==tar){
                ans.push_back(v);
                return;
            }
        }
        
        helper(root->left,v,ans,tar-(root->val));
        helper(root->right,v,ans,tar-(root->val));
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        std::vector<std::vector<int>> ans;
        std::vector<int> v;
        helper(root,v,ans,targetSum);
        return ans;
// std::vector<std::vector<int>> anrs;
//         for(int i=0;i<ans.size();i++){
//             int sum=0;
//             for(int j=0;j<ans[i].size();j++){
                
//                 sum+=ans[i][j];
//             }
//             if(sum==targetSum){
//                 anrs.push_back(ans[i]);
//             }
//         }
//         return anr[s;
  }
};
